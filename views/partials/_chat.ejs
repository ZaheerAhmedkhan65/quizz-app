<div class="ask-ai-chat-modal bg-primary-subtle">
    <div class="d-flex flex-column">
        <div class="ask-ai-chat-header d-flex">
            <div class="d-flex align-items-center">
                <h3 class="m-0">AI Chat</h3>
            </div>
            <div class="d-flex">
                <button type="button" role="button" class="clear-chat-btn bg-transparent popconfirm-toggle d-flex"
                    aria-label="Clear Chat" title="Clear Chat" fdprocessedid="37sycb">
                    <svg style="width:20px; transform: rotate(360deg); height:20px; fill:#8e8e8e;" viewBox="0 0 512 512"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96 64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z">
                        </path>
                    </svg>
                </button>

                <button type="button" role="button" class="shrink-chat-btn bg-transparent d-flex d-none"
                    aria-label="Shrink Chat" title="Shrink Chat">
                    <svg style="width:18px; height:18px; fill:#8e8e8e;" viewBox="0 0 512 512"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M439 7c9.4-9.4 24.6-9.4 33.9 0l32 32c9.4 9.4 9.4 24.6 0 33.9l-87 87 39 39c6.9 6.9 8.9 17.2 5.2 26.2s-12.5 14.8-22.2 14.8H296c-13.3 0-24-10.7-24-24V72c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2l39 39L439 7zM72 272H216c13.3 0 24 10.7 24 24V440c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-39-39L73 505c-9.4 9.4-24.6 9.4-33.9 0L7 473c-9.4-9.4-9.4-24.6 0-33.9l87-87L55 313c-6.9-6.9-8.9-17.2-5.2-26.2s12.5-14.8 22.2-14.8z">
                        </path>
                    </svg>
                </button>

                <button type="button" role="button" class="expand-chat-btn bg-transparent d-flex"
                    aria-label="Expand Chat" title="Expand Chat" fdprocessedid="bdwmcl">
                    <svg style="width:18px; height:18px; fill:#8e8e8e;" viewBox="0 0 512 512"
                        xmlns="http://www.w3.org/2000/svg">
                        <!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                        <path
                            d="M344 0H488c13.3 0 24 10.7 24 24V168c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-39-39-87 87c-9.4 9.4-24.6 9.4-33.9 0l-32-32c-9.4-9.4-9.4-24.6 0-33.9l87-87L327 41c-6.9-6.9-8.9-17.2-5.2-26.2S334.3 0 344 0zM168 512H24c-13.3 0-24-10.7-24-24V344c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2l39 39 87-87c9.4-9.4 24.6-9.4 33.9 0l32 32c9.4 9.4 9.4 24.6 0 33.9l-87 87 39 39c6.9 6.9 8.9 17.2 5.2 26.2s-12.5 14.8-22.2 14.8z">
                        </path>
                    </svg>
                </button>

                <button type="button" role="button" class="close-chat-btn border-0 bg-transparent d-flex" aria-label="Close Chat"
                    title="Close Chat" fdprocessedid="glk1su">
                    <svg style="width:24px; height:24px; fill:#8b8989;" viewBox="0 0 384 512"
                        xmlns="http://www.w3.org/2000/svg">
                        <path
                            d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z">
                        </path>
                    </svg>
                </button>
            </div>
        </div>
    </div>


    <div class="general-chat-window tab-pane active show-chat-window tab-pane position-relative" id="ai-chat-tabs-2" role="tabpanel"
        aria-labelledby="ai-chat-tab-technical">


        <div class="flex-column chat-messages">
            <div class="ai-guidance-message">
                <div data-message-id="welcome-message" class="ai-message welcome-message">
                    <div class="chat-message-text">
                        <div class="welcome-header">
                            <div class="welcome-icon">üëã</div>
                            <h3 class="welcome-title">Welcome to AI Assistant!</h3>
                        </div>
                        
                        <div class="welcome-content">
                            <p class="welcome-text">I'm here to help you with:</p>
                            
                            <div class="feature-list">
                                <div class="feature-item">
                                    <span class="feature-icon">üìù</span>
                                    <span class="feature-text">PDF content analysis</span>
                                </div>
                                <div class="feature-item">
                                    <span class="feature-icon">‚ùì</span>
                                    <span class="feature-text">Question generation</span>
                                </div>
                                <div class="feature-item">
                                    <span class="feature-icon">üí°</span>
                                    <span class="feature-text">Learning assistance</span>
                                </div>
                            </div>
                            
                            <div class="welcome-tip">
                                <div class="tip-icon">üí°</div>
                                <p class="tip-text">Pro Tip: Upload a PDF first for the most accurate help with your specific content!</p>
                            </div>
                            
                            <div class="welcome-action">
                                <p>Ready when you are! Ask me anything or upload a file to get started.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <form id="chat-input-form" class="chat-form-outline form-outline" data-mdb-input-init="" data-mdb-input-initialized="true"
    data-gtm-form-interact-id="0">
    <div class="w-100" style="padding: 10px 10px 0px;">
      <textarea id="chat-input" class="chat-input placeholder-active" type="text" placeholder="Ask anything" rows="1"
      aria-label="AI Chat Input" title="AI Chat Input" data-gtm-form-interact-field-id="0"
      style="height: auto;">
      </textarea>
    </div>
    
    <div class="d-flex align-items-center justify-content-between w-100" style="padding: 0px 10px 10px;">
      <div class="d-flex">
        <input type="file" id="file-input" accept=".pdf" style="display: none;">
         <button type="button" id="file-upload-button" style="border: 1px solid antiquewhite;font-weight: bold;" class="rounded-circle bg-transparent outline-none">
           <i class="bi bi-plus-lg fw-bold" style="color: antiquewhite;"></i>
         </button>
      </div>
      <div class="d-flex align-items-center">
        <button class="chat-send-btn rounded-circle me-2 d-block" fdprocessedid="777gt8">
          <i class="bi bi-send fw-bold"></i>
        </button>
        <button type="button" class="chat-stop-btn me-2 d-none" fdprocessedid="0jup7q">
            <i class="bi bi-stop-fill"></i>
        </button>
      </div>
    </div>
    
</form>
<p class="text-center text-muted" style="font-size: 10px;padding: 5px 0px;">This can make mistakes.Check important info!</p>


</div>

<div class="open-chat-btn-wrapper" aria-label="Open AI Chat" title="Open AI Chat">
    <div>AI Chat</div>
    <button class="open-chat-btn btn-floating d-flex align-items-center justify-content-center"
        aria-label="Open AI Chat" title="Open AI Chat" fdprocessedid="4qvser">
        <i class="bi bi-chat-dots-fill"></i>
    </button>
</div>

<script>
    let chatModal = document.querySelector(".ask-ai-chat-modal");
    let openChatBtn = document.querySelector(".open-chat-btn");
    let closeChatBtn = document.querySelector(".close-chat-btn");
    let chatHeader = document.querySelector(".ask-ai-chat-header");
    let chatBody = document.querySelector(".ask-ai-chat-body");
    let chatFooter = document.querySelector(".ask-ai-chat-footer");
    let chatInput = document.querySelector("#chat-input");
    let chatSendBtn = document.querySelector(".chat-send-btn");
    let chatStopBtn = document.querySelector(".chat-stop-btn");
    let expandChatBtn = document.querySelector(".expand-chat-btn");
    let shrinkChatBtn = document.querySelector(".shrink-chat-btn");
    let clearChatBtn = document.querySelector(".clear-chat-btn");
    let chatMessages = document.querySelector(".chat-messages");
    let chatInputForm = document.querySelector("#chat-input-form");
    let gettingResponse = document.createElement('div');

    const fileInput = document.getElementById("file-input");
    const fileUploadButton = document.getElementById("file-upload-button");
    fileUploadButton.addEventListener("click", () => {
      fileInput.click();
    });

    document.addEventListener("DOMContentLoaded", (event) => {
      chatInput.value = "";
    })
    
    chatInput.addEventListener("keydown", async (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            let message = chatInput.value;
            const file = fileInput.files[0];
            // If a file is selected, upload it and get the image URL
      if (file) {
        const formData = new FormData();
        formData.append("file", file);

        try {
          const uploadResponse = await fetch("/api/gemini/upload", {
            method: "POST",
            body: formData,
          });
          const {id} = await uploadResponse.json();
        } catch (error) {
          console.error("Error uploading pdf:", error);
          alert("Failed to upload pdf. Please try again.");
          return;
        }
      }
            if (message) {
                sendMessage(message);
                chatInput.value = "";
            }
        }
    });

    chatSendBtn.addEventListener("click", () => {
        event.preventDefault();
        let message = chatInput.value;
        if (message) {
            sendMessage(message);
            chatInput.value = "";
        } else {
            alert("Please enter a message");
        }
    });

    chatStopBtn.addEventListener("click", () => {
        stopMessage();
    });

    clearChatBtn.addEventListener("click", () => {
        clearChat();
    });

    expandChatBtn.addEventListener("click", () => {
        expandChat();
    });

    shrinkChatBtn.addEventListener("click", () => {
        shrinkChat();
    });



    openChatBtn.addEventListener("click", () => {
    chatModal.classList.add("open");
    chatModal.style.transform = "translateX(0)";
    chatModal.style.opacity = "1";
    chatModal.style.visibility = "visible";
});

closeChatBtn.addEventListener("click", () => {
    chatModal.classList.remove("open");
    chatModal.style.transform = `translateX(calc(${chatModal.offsetWidth}px + 3rem))`;
    chatModal.style.opacity = "0";
    chatModal.style.visibility = "hidden";
});


    function sendMessage(message) {
        message = message.trim();
        if (message) {
            let messageElement = document.createElement("div");
            messageElement.classList.add("sent");
            messageElement.innerHTML = `<div class="message-content">${message}</div>`;
            chatMessages.appendChild(messageElement);
            scrollToBottom();
            // Simulate AI response
            setTimeout(() => {
                gettingResponse.innerHTML = `
                  <div class="getting-response">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                  </div>
                `;
                chatMessages.appendChild(gettingResponse);
                fetchGeminiResponse(message);
            }, 100);
        }
        
    }


    function stopMessage() {
        // stop message
    }

    function clearChat() {
        // clear chat
        chatMessages.innerHTML = "";
    }

    function expandChat() {
        // expand chat
        chatModal.classList.add("expanded");
    }

    function shrinkChat() {
        // shrink chat
    }
</script>

<script>

  async function fetchGeminiResponse(prompt) {
    const res = await fetch("/api/gemini/generate-response", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    });

    const data = await res.json();
    const aiMessage = document.createElement('div');
    if(!data.response) {
        aiMessage.classList.add("ai-message");
        gettingResponse.remove();
        aiMessage.innerHTML = `<div class="message-content">No response generated. Please try again.</div>`;
        chatMessages.appendChild(aiMessage);
        return;
    }

    setTimeout(() => {
      gettingResponse.remove();
      const formattedResponse = generateFormattedResponse(data.response);
      addMessageToChat(formattedResponse,aiMessage);
      chatMessages.appendChild(aiMessage);
    }, 3000);
  }


  function addMessageToChat(message, aiMessage) {
    // Set the appropriate classes for the AI message
    aiMessage.classList.add('ai-message');
    
    // Create message wrapper and content elements
    const messageWrapper = document.createElement('div');
    messageWrapper.classList.add('ai-message-wrapper');
    
    const messageContent = document.createElement('div');
    messageContent.classList.add('chat-message-text');
    
    // Directly use the formatted HTML from generateFormattedResponse
    messageContent.innerHTML = message;
    
    // Append elements to build the proper structure
    messageWrapper.appendChild(messageContent);
    aiMessage.appendChild(messageWrapper);
    
    // Add the message to the chat container
    chatMessages.appendChild(aiMessage);
    
    // Scroll to the bottom smoothly
    scrollToBottom();
}

function scrollToBottom() {
    chatMessages.scrollTo({
        top: chatMessages.scrollHeight,
        behavior: 'smooth'
    });
}


function generateFormattedResponse(response) {
  // If response is empty or undefined
  if (!response) return '<p>No response received</p>';

  // First, handle code blocks to prevent them from being modified by other formatting
  let formattedResponse = response.replace(/```([\s\S]*?)```/g, (match, code) => {
    return `<pre><code>${code.trim()}</code></pre>`;
  }).replace(/`([^`]+)`/g, (match, code) => {
    return `<code>${code}</code>`;
  });

  // Handle links
  formattedResponse = formattedResponse.replace(/(https?:\/\/[^\s]+)/g, (url) => {
    return `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`;
  });

  // Handle different types of content
  if (isMCQResponse(formattedResponse)) {
    formattedResponse = formatMCQResponse(formattedResponse);
  } else if (isNumberedList(formattedResponse)) {
    formattedResponse = formatNumberedList(formattedResponse);
  } else if (isBulletList(formattedResponse)) {
    formattedResponse = formatBulletList(formattedResponse);
  } else {
    // Default formatting for plain text
    formattedResponse = formatPlainText(formattedResponse);
  }

  return formattedResponse;
}

// Helper functions for different content types
function isMCQResponse(text) {
  // Checks for question patterns like "1. Question text" followed by options (a), (b) etc.
  return /\d+\.\s.+?\n(\([a-d]\)\s.+?\n)+/g.test(text);
}

function formatMCQResponse(text) {
  const questionRegex = /(\d+\.\s.*?)(?=(?:\d+\.\s)|$)/gs;
  const questions = text.match(questionRegex);
  let result = '';

  if (questions) {
    questions.forEach((qBlock, index) => {
      const lines = qBlock.trim().split('\n').filter(line => line.trim() !== '');
      const questionText = lines[0].replace(/\d+\.\s/, '').trim();
      const optionsText = lines.slice(1).join('\n');
      
      // Extract options, handling (correct) marker
      const options = optionsText.match(/\([a-d]\)\s[^()]+(\(correct\))?/g) || [];
      
      const copyId = `question-block-${index}`;
      
      result += `
        <div class="question-block" id="${copyId}">
          <p><strong>${index + 1}. ${cleanFormatting(questionText)}</strong></p>
          <ul class="mcq-options">
            ${options.map(option => {
              const isCorrect = option.includes('(correct)');
              const cleanOption = cleanFormatting(option.replace('(correct)', '').trim());
              return `<li class="${isCorrect ? 'correct-option' : ''}">${cleanOption}</li>`;
            }).join('')}
          </ul>
          <button onclick="copyToClipboard('${copyId}')" class="copy-btn">Copy</button>
        </div>
      `;
    });
  }
  
  return result || `<div class="question-block">${text}</div>`;
}

function isNumberedList(text) {
  // Checks for numbered items (1., 2., etc.) with more than 1 item
  return (text.match(/\d+\.\s/g) || []).length > 1;
}

function formatNumberedList(text) {
  const items = text.split(/\d+\.\s/).filter(item => item.trim() !== '');
  let result = '';
  
  items.forEach((item, index) => {
    const content = item.trim();
    const [heading, ...details] = content.split('\n');
    const copyId = `numbered-item-${index}`;
    
    result += `
      <div class="numbered-item" id="${copyId}">
        <p><strong>${index + 1}. ${cleanFormatting(heading)}</strong></p>
        ${details.filter(d => d.trim()).map(d => `<p>${cleanFormatting(d)}</p>`).join('')}
        <button onclick="copyToClipboard('${copyId}')" class="copy-btn">Copy</button>
      </div>
    `;
  });
  
  return result;
}

function isBulletList(text) {
  // Checks for bullet points (-, *, ‚Ä¢)
  return /^(\s*[-*‚Ä¢]\s+.+(\n|$))+/gm.test(text);
}

function formatBulletList(text) {
  const items = text.split(/^[-*‚Ä¢]\s+/gm).filter(item => item.trim() !== '');
  let result = '<ul class="bullet-list">';
  
  items.forEach(item => {
    result += `<li>${cleanFormatting(item.trim())}</li>`;
  });
  
  result += '</ul>';
  return result;
}

function formatPlainText(text) {
  // Handle paragraphs separated by double newlines
  const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim() !== '');
  return paragraphs.map(p => `<p>${cleanFormatting(p)}</p>`).join('');
}

function cleanFormatting(text) {
  // Clean markdown-style formatting
  return text
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')  // **bold**
    .replace(/\*(.*?)\*/g, '<em>$1</em>')                // *italic*
    .replace(/_(.*?)_/g, '<em>$1</em>')                  // _italic_
    .replace(/~~(.*?)~~/g, '<del>$1</del>')              // ~~strikethrough~~
    .replace(/`(.*?)`/g, '<code>$1</code>');             // `code`
}




function copyToClipboard(elementId) {
  const el = document.getElementById(elementId);
  if (!el) return;

  const textToCopy = el.innerText || el.textContent;

  navigator.clipboard.writeText(textToCopy).then(() => {
    console.log("Copied to clipboard: ", textToCopy);
  }).catch(err => {
    console.error("Failed to copy: ", err);
  });
}

  
</script>